[gd_resource type="VisualShader" load_steps=4 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
output_port_for_preview = 0
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=2]
output_port_for_preview = 0
function = 0

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "screen_uv"

[resource]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(SCREEN_UV, 0.0);

// Input:2
	float n_out2p0 = TIME;

// ScalarFunc:3
	float n_out3p0 = sin(n_out2p0);

// Output:0
	COLOR.rgb = n_out4p0;
	COLOR.a = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -524.725, 190.25 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 60, 520 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -380, 520 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -180, 520 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -170.725, 305.25 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 0, 1, 4, 0, 0, 0 )
